Encrypt:
  FILE* file;
  char enc_filename[MAX_DIRECTORY];
  int filesize;
  int padding;
  char unencrypted_block[AES_BLOCK_SIZE + 1] = {'\0'};
  char encrypted_block[AES_BLOCK_SIZE + 1] = {'\0'};
  AES_set_encrypt_key(key, MAX_KEY, &aes_key);

  file = fopen(filename, "r");
  if(file) {

    fseek(file, 0, SEEK_END);
    filesize = ftell(file);
    fclose(file);

  }

  padding = -((filesize % AES_BLOCK_SIZE) - AES_BLOCK_SIZE);
  char unencrypted_file_text[filesize + 1];
  memset(unencrypted_file_text, '\0', filesize + 1);
  char encrypted_file_text[filesize + padding + 1];
  memset(encrypted_file_text, '\0', filesize + padding + 1);

  file = fopen(filename, "r");
  if(file) {

    fread(unencrypted_file_text, 1, filesize, file);
    fclose(file);

  }

  //TODO: split incoming data into 16 byte chunks

  for(int i = 0; i < (filesize + padding)/AES_BLOCK_SIZE; i++) {

    for(int j = 0; j < AES_BLOCK_SIZE; j++) {

      if(i == ((filesize + padding)/AES_BLOCK_SIZE) - 1) {

        if(j >= (AES_BLOCK_SIZE - padding)) {

          unencrypted_block[j] = (char) padding;

        } else {

          unencrypted_block[j] = unencrypted_file_text[AES_BLOCK_SIZE*i + j];

        }

      } else {

        unencrypted_block[j] = unencrypted_file_text[AES_BLOCK_SIZE*i + j];

      }

    }

    AES_encrypt(unencrypted_block, encrypted_block, &aes_key);

    for(int j = 0; j < AES_BLOCK_SIZE; j++) {

      encrypted_file_text[i*AES_BLOCK_SIZE + j] = encrypted_block[j];

    }

    memset(unencrypted_block, '\0', AES_BLOCK_SIZE);
    memset(encrypted_block, '\0', AES_BLOCK_SIZE);

  }

Decrypt:
    FILE* file;
    char dec_filename[MAX_DIRECTORY] = {'\0'};
    int filesize;
    int padding;
    char unencrypted_block[AES_BLOCK_SIZE + 1] = {'\0'};
    char encrypted_block[AES_BLOCK_SIZE + 1] = {'\0'};
    AES_set_decrypt_key(key, MAX_KEY, &aes_key);

    file = fopen(filename, "r");
    if(file) {

      fseek(file, 0, SEEK_END);
      filesize = ftell(file);
      fclose(file);

    }

    char unencrypted_file_text[filesize + 1];
    memset(unencrypted_file_text, '\0', filesize + 1);
    char encrypted_file_text[filesize + 1];
    memset(encrypted_file_text, '\0', filesize + 1);

    file = fopen(filename, "r");
    if(file) {

      fread(encrypted_file_text, 1, filesize, file);
      fclose(file);

    }

    //TODO: split incoming data into 16 byte chunks

    for(int i = 0; i < filesize/AES_BLOCK_SIZE; i++) {

      for(int j = 0; j < AES_BLOCK_SIZE; j++) {

        encrypted_block[j] = encrypted_file_text[AES_BLOCK_SIZE*i + j];

      }

      AES_decrypt(encrypted_block, unencrypted_block, &aes_key);

      for(int j = 0; j < AES_BLOCK_SIZE; j++) {

        unencrypted_file_text[i*AES_BLOCK_SIZE + j] = unencrypted_block[j];

      }

      memset(unencrypted_block, '\0', AES_BLOCK_SIZE);
      memset(encrypted_block, '\0', AES_BLOCK_SIZE);

    }